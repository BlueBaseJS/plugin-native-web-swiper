"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const react_native_1 = require("react-native");
const react_1 = tslib_1.__importDefault(require("react"));
class Swiper extends react_1.default.Component {
    constructor(props) {
        super(props);
        this.getActionMinWidth = (props) => {
            return ((props.direction === 'row' ? this.state.width : this.state.height) * props.actionMinWidth);
        };
        this.state = {
            activeIndex: props.index,
            height: 0,
            pan: new react_native_1.Animated.ValueXY(),
            width: 0,
        };
        this._animatedValueX = 0;
        this._animatedValueY = 0;
        this._panResponder = react_native_1.PanResponder.create({
            onMoveShouldSetPanResponderCapture: (_e, gestureState) => {
                if (this.props.onAnimationStart) {
                    this.props.onAnimationStart();
                }
                const allow = Math.abs(this.props.direction === 'row' ? gestureState.dx : gestureState.dy) > 5;
                if (allow) {
                    this.stopAutoplay();
                }
                return allow;
            },
            // onMoveShouldSetResponderCapture: () => true,
            onPanResponderGrant: (_e, _gestureState) => this._fixState(),
            onPanResponderMove: react_native_1.Animated.event([
                null, this.props.direction === 'row' ? { dx: this.state.pan.x } : { dy: this.state.pan.y },
            ]),
            onPanResponderRelease: (_e, gesture) => {
                const correction = this.props.direction === 'row' ? gesture.moveX - gesture.x0 : gesture.moveY - gesture.y0;
                this.startAutoplay();
                if (Math.abs(correction) < this.getActionMinWidth(props)) {
                    return react_native_1.Animated.spring(this.state.pan, { toValue: { x: 0, y: 0 } }).start(() => {
                        if (this.props.onAnimationEnd) {
                            this.props.onAnimationEnd(this.state.activeIndex);
                        }
                    });
                }
                this._changeIndex(correction > 0 ? -1 : 1);
            },
            onPanResponderTerminationRequest: () => false,
        });
    }
    componentDidMount() {
        this.state.pan.x.addListener((value) => this._animatedValueX = value.value);
        this.state.pan.y.addListener((value) => this._animatedValueY = value.value);
        this.startAutoplay();
    }
    componentWillUnmount() {
        this.stopAutoplay();
        this.state.pan.x.removeAllListeners();
        this.state.pan.y.removeAllListeners();
    }
    startAutoplay() {
        this.stopAutoplay();
        if (!!this.props.autoplayTimeout) {
            this.autoplay = setTimeout(() => {
                this.moveUpDown(this.props.autoplayTimeout < 0);
            }, Math.abs(this.props.autoplayTimeout) * 1000);
        }
    }
    stopAutoplay() {
        if (!!this.autoplay) {
            clearTimeout(this.autoplay);
        }
    }
    moveUpDown(down = false) {
        this._fixState();
        if (this.props.onAnimationStart) {
            this.props.onAnimationStart();
        }
        this._changeIndex(down ? -1 : 1);
    }
    _fixState() {
        this._animatedValueX = this.props.direction === 'row' ? this.state.width * this.state.activeIndex * -1 : 0;
        this._animatedValueY = this.props.direction === 'row' ? 0 : this.state.height * this.state.activeIndex * -1;
        this.state.pan.setOffset({ x: this._animatedValueX, y: this._animatedValueY });
        this.state.pan.setValue({ x: 0, y: 0 });
    }
    _changeIndex(delta = 1) {
        const move = { x: 0, y: 0 };
        let skipChanges = (!delta);
        let calcDelta = delta;
        if (this.state.activeIndex <= 0 && delta < 0) {
            skipChanges = (!this.props.loop);
            calcDelta = this.count + delta;
        }
        else if (this.state.activeIndex + 1 >= this.count && delta > 0) {
            skipChanges = (!this.props.loop);
            calcDelta = -1 * this.state.activeIndex + delta - 1;
        }
        if (skipChanges) {
            return react_native_1.Animated.spring(this.state.pan, { toValue: move }).start(() => {
                if (this.props.onAnimationEnd) {
                    this.props.onAnimationEnd(this.state.activeIndex);
                }
            });
        }
        this.stopAutoplay();
        const index = this.state.activeIndex + calcDelta;
        this.setState({ activeIndex: index });
        if (this.props.direction === 'row') {
            move.x = this.state.width * -1 * calcDelta;
        }
        else {
            move.y = this.state.height * -1 * calcDelta;
        }
        react_native_1.Animated.spring(this.state.pan, { toValue: move }).start(() => {
            if (this.props.onAnimationEnd) {
                this.props.onAnimationEnd(index);
            }
        });
        this.startAutoplay();
        if (!!this.props.onIndexChanged) {
            this.props.onIndexChanged(index);
        }
    }
    _onLayout(event) {
        const { width, height } = event.nativeEvent.layout;
        this.setState({ width, height }, () => this._fixState());
    }
    render() {
        const { pan, width, height, activeIndex } = this.state;
        const { direction, containerStyle, swipeAreaStyle, swipeWrapperStyle, controlsWrapperStyle, dotsWrapperStyle, dotElement, dotStyle, activeDotElement, activeDotStyle, prevButtonElement, prevButtonStyle, prevButtonText, nextButtonElement, nextButtonStyle, nextButtonText, loop, scrollEnabled, showDots, showNextPrev } = this.props;
        if (!width) {
            return (react_1.default.createElement(react_native_1.View, { style: [styles.container, containerStyle], onLayout: this._onLayout.bind(this) }));
        }
        const overRangeButtonsOpacity = !loop ? this.props.overRangeButtonsOpacity : this.props.overRangeButtonsOpacity || 1;
        let { children } = this.props;
        if (!Array.isArray(children)) {
            children = [children];
        }
        this.count = children.length;
        return (react_1.default.createElement(react_native_1.View, { style: [styles.container, containerStyle], onLayout: this._onLayout.bind(this) },
            react_1.default.createElement(react_native_1.View, { style: [styles.sliderContainer, swipeAreaStyle] },
                scrollEnabled ?
                    react_1.default.createElement(react_native_1.Animated.View, Object.assign({ style: [{
                                left: 0,
                                position: 'relative',
                                top: 0,
                            }, swipeWrapperStyle, {
                                flexDirection: direction,
                                height: direction === 'row' ? height : height * this.count,
                                width: direction === 'row' ? width * this.count : width,
                            }, { transform: [{ translateX: pan.x }, { translateY: pan.y }] }] }, this._panResponder.panHandlers), children.map((el, i) => (react_1.default.createElement(react_native_1.View, { key: i, style: { width, height } }, el)))) :
                    react_1.default.createElement(react_native_1.Animated.View, { style: [{
                                left: 0,
                                position: 'relative',
                                top: 0,
                            }, swipeWrapperStyle, {
                                flexDirection: direction,
                                height: direction === 'row' ? height : height * this.count,
                                width: direction === 'row' ? width * this.count : width,
                            }, { transform: [{ translateX: pan.x }, { translateY: pan.y }] }] }, children.map((el, i) => (react_1.default.createElement(react_native_1.View, { key: i, style: { width, height } }, el)))),
                react_1.default.createElement(react_native_1.Animated.View, { style: [{
                            left: 0,
                            position: 'relative',
                            top: 0,
                        }, swipeWrapperStyle, {
                            flexDirection: direction,
                            height: direction === 'row' ? height : height * this.count,
                            width: direction === 'row' ? width * this.count : width,
                        }, { transform: [{ translateX: pan.x }, { translateY: pan.y }] }] }, children.map((el, i) => (react_1.default.createElement(react_native_1.View, { key: i, style: { width, height } }, el)))),
                (showDots || showNextPrev) && react_1.default.createElement(react_native_1.View, { style: [styles.controlsWrapperStyle, {
                            flexDirection: direction,
                        }, direction === 'row' ? { left: 0 } : { top: 0 }, controlsWrapperStyle] },
                    showNextPrev && react_1.default.createElement(react_native_1.View, { style: { opacity: !activeIndex ? overRangeButtonsOpacity : 1 } },
                        react_1.default.createElement(react_native_1.TouchableOpacity, { disabled: !activeIndex && !loop, onPress: () => this.moveUpDown(true) }, prevButtonElement || react_1.default.createElement(react_native_1.Text, { style: [styles.prevButtonStyle, prevButtonStyle] }, prevButtonText))),
                    showDots && react_1.default.createElement(react_native_1.View, { style: [{ flexDirection: direction }, styles.dotsWrapperStyle, dotsWrapperStyle] }, children.map((_el, i) => (react_1.default.createElement(react_native_1.View, { key: i }, i === activeIndex
                        ? activeDotElement || react_1.default.createElement(react_native_1.View, { style: [styles.activeDotStyle, activeDotStyle] })
                        : dotElement || react_1.default.createElement(react_native_1.View, { style: [styles.dotStyle, dotStyle] }))))),
                    showNextPrev && react_1.default.createElement(react_native_1.View, { style: { opacity: activeIndex + 1 >= this.count ? overRangeButtonsOpacity : 1 } },
                        react_1.default.createElement(react_native_1.TouchableOpacity, { disabled: activeIndex + 1 >= this.count && !loop, onPress: () => this.moveUpDown() }, nextButtonElement || react_1.default.createElement(react_native_1.Text, { style: [styles.nextButtonStyle, nextButtonStyle] }, nextButtonText)))))));
    }
}
Swiper.defaultProps = {
    actionMinWidth: 0.25,
    autoplayTimeout: 0,
    direction: 'row',
    index: 0,
    loop: false,
    nextButtonText: 'next',
    overRangeButtonsOpacity: 0,
    prevButtonText: 'prev',
    scrollEnabled: true,
    showDots: true,
    showNextPrev: true,
};
exports.default = Swiper;
const styles = react_native_1.StyleSheet.create({
    activeDotStyle: {
        backgroundColor: '#007aff',
        borderRadius: 4,
        height: 8,
        marginBottom: 3,
        marginLeft: 3,
        marginRight: 3,
        marginTop: 3,
        width: 8,
    },
    container: {
        backgroundColor: 'transparent',
        flex: 1,
    },
    controlsWrapperStyle: {
        alignItems: 'center',
        bottom: 0,
        justifyContent: 'space-between',
        padding: 10,
        position: 'absolute',
        right: 0,
    },
    dotStyle: {
        backgroundColor: 'rgba(0,0,0,.2)',
        borderRadius: 4,
        height: 8,
        marginBottom: 3,
        marginLeft: 3,
        marginRight: 3,
        marginTop: 3,
        width: 8,
    },
    dotsWrapperStyle: {
        alignItems: 'center',
        justifyContent: 'center',
    },
    nextButtonStyle: {
        color: '#007aff',
    },
    prevButtonStyle: {
        color: '#777777',
    },
    sliderContainer: {
        backgroundColor: 'transparent',
        flex: 1,
        overflow: 'hidden',
        position: 'relative',
    },
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,