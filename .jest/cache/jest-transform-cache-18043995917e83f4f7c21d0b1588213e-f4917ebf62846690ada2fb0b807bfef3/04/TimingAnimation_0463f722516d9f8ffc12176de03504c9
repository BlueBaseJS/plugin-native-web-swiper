65139ce61232ce4834c08340d603e5a1
'use strict';

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _assertThisInitialized2 = _interopRequireDefault(require("@babel/runtime/helpers/assertThisInitialized"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _get2 = _interopRequireDefault(require("@babel/runtime/helpers/get"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var AnimatedValue = require('../nodes/AnimatedValue');

var AnimatedValueXY = require('../nodes/AnimatedValueXY');

var Animation = require('./Animation');

var _require = require('../NativeAnimatedHelper'),
    shouldUseNativeDriver = _require.shouldUseNativeDriver;

var _easeInOut;

function easeInOut() {
  if (!_easeInOut) {
    var Easing = require('Easing');

    _easeInOut = Easing.inOut(Easing.ease);
  }

  return _easeInOut;
}

var TimingAnimation = function (_Animation) {
  (0, _inherits2.default)(TimingAnimation, _Animation);

  function TimingAnimation(config) {
    var _this;

    (0, _classCallCheck2.default)(this, TimingAnimation);
    _this = (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(TimingAnimation).call(this));
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "_startTime", void 0);
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "_fromValue", void 0);
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "_toValue", void 0);
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "_duration", void 0);
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "_delay", void 0);
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "_easing", void 0);
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "_onUpdate", void 0);
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "_animationFrame", void 0);
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "_timeout", void 0);
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "_useNativeDriver", void 0);
    _this._toValue = config.toValue;
    _this._easing = config.easing !== undefined ? config.easing : easeInOut();
    _this._duration = config.duration !== undefined ? config.duration : 500;
    _this._delay = config.delay !== undefined ? config.delay : 0;
    _this.__iterations = config.iterations !== undefined ? config.iterations : 1;
    _this.__isInteraction = config.isInteraction !== undefined ? config.isInteraction : true;
    _this._useNativeDriver = shouldUseNativeDriver(config);
    return _this;
  }

  (0, _createClass2.default)(TimingAnimation, [{
    key: "__getNativeAnimationConfig",
    value: function __getNativeAnimationConfig() {
      var frameDuration = 1000.0 / 60.0;
      var frames = [];

      for (var dt = 0.0; dt < this._duration; dt += frameDuration) {
        frames.push(this._easing(dt / this._duration));
      }

      frames.push(this._easing(1));
      return {
        type: 'frames',
        frames: frames,
        toValue: this._toValue,
        iterations: this.__iterations
      };
    }
  }, {
    key: "start",
    value: function start(fromValue, onUpdate, onEnd, previousAnimation, animatedValue) {
      var _this2 = this;

      this.__active = true;
      this._fromValue = fromValue;
      this._onUpdate = onUpdate;
      this.__onEnd = onEnd;

      var start = function start() {
        if (_this2._duration === 0 && !_this2._useNativeDriver) {
          _this2._onUpdate(_this2._toValue);

          _this2.__debouncedOnEnd({
            finished: true
          });
        } else {
          _this2._startTime = Date.now();

          if (_this2._useNativeDriver) {
            _this2.__startNativeAnimation(animatedValue);
          } else {
            _this2._animationFrame = requestAnimationFrame(_this2.onUpdate.bind(_this2));
          }
        }
      };

      if (this._delay) {
        this._timeout = setTimeout(start, this._delay);
      } else {
        start();
      }
    }
  }, {
    key: "onUpdate",
    value: function onUpdate() {
      var now = Date.now();

      if (now >= this._startTime + this._duration) {
        if (this._duration === 0) {
          this._onUpdate(this._toValue);
        } else {
          this._onUpdate(this._fromValue + this._easing(1) * (this._toValue - this._fromValue));
        }

        this.__debouncedOnEnd({
          finished: true
        });

        return;
      }

      this._onUpdate(this._fromValue + this._easing((now - this._startTime) / this._duration) * (this._toValue - this._fromValue));

      if (this.__active) {
        this._animationFrame = requestAnimationFrame(this.onUpdate.bind(this));
      }
    }
  }, {
    key: "stop",
    value: function stop() {
      (0, _get2.default)((0, _getPrototypeOf2.default)(TimingAnimation.prototype), "stop", this).call(this);
      this.__active = false;
      clearTimeout(this._timeout);
      global.cancelAnimationFrame(this._animationFrame);

      this.__debouncedOnEnd({
        finished: false
      });
    }
  }]);
  return TimingAnimation;
}(Animation);

module.exports = TimingAnimation;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,