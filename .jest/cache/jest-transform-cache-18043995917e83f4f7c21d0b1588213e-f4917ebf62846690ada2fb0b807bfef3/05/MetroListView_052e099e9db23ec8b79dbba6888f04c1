349dedb7c54423582453dda51ee06085
'use strict';

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf3 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _assertThisInitialized2 = _interopRequireDefault(require("@babel/runtime/helpers/assertThisInitialized"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var ListView = require('ListView');

var React = require('React');

var RefreshControl = require('RefreshControl');

var ScrollView = require('ScrollView');

var invariant = require('fbjs/lib/invariant');

var MetroListView = function (_React$Component) {
  (0, _inherits2.default)(MetroListView, _React$Component);

  function MetroListView() {
    var _getPrototypeOf2,
        _this2 = this;

    var _this;

    (0, _classCallCheck2.default)(this, MetroListView);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = (0, _possibleConstructorReturn2.default)(this, (_getPrototypeOf2 = (0, _getPrototypeOf3.default)(MetroListView)).call.apply(_getPrototypeOf2, [this].concat(args)));
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "state", _this._computeState(_this.props, {
      ds: new ListView.DataSource({
        rowHasChanged: function rowHasChanged(itemA, itemB) {
          return true;
        },
        sectionHeaderHasChanged: function sectionHeaderHasChanged() {
          return true;
        },
        getSectionHeaderData: function getSectionHeaderData(dataBlob, sectionID) {
          return _this.state.sectionHeaderData[sectionID];
        }
      }),
      sectionHeaderData: {}
    }));
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "_listRef", void 0);
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "_captureRef", function (ref) {
      _this._listRef = ref;
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "_renderFooter", function () {
      return React.createElement(_this2.props.FooterComponent, {
        key: "$footer"
      });
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "_renderRow", function (item, sectionID, rowID, highlightRow) {
      return _this.props.renderItem({
        item: item,
        index: rowID
      });
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "_renderSectionHeader", function (section, sectionID) {
      var renderSectionHeader = _this.props.renderSectionHeader;
      invariant(renderSectionHeader, 'Must provide renderSectionHeader with sections prop');
      return renderSectionHeader({
        section: section
      });
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "_renderSeparator", function (sID, rID) {
      return React.createElement(_this2.props.SeparatorComponent, {
        key: sID + rID
      });
    });
    return _this;
  }

  (0, _createClass2.default)(MetroListView, [{
    key: "scrollToEnd",
    value: function scrollToEnd(params) {
      throw new Error('scrollToEnd not supported in legacy ListView.');
    }
  }, {
    key: "scrollToIndex",
    value: function scrollToIndex(params) {
      throw new Error('scrollToIndex not supported in legacy ListView.');
    }
  }, {
    key: "scrollToItem",
    value: function scrollToItem(params) {
      throw new Error('scrollToItem not supported in legacy ListView.');
    }
  }, {
    key: "scrollToLocation",
    value: function scrollToLocation(params) {
      throw new Error('scrollToLocation not supported in legacy ListView.');
    }
  }, {
    key: "scrollToOffset",
    value: function scrollToOffset(params) {
      var animated = params.animated,
          offset = params.offset;

      this._listRef.scrollTo(this.props.horizontal ? {
        x: offset,
        animated: animated
      } : {
        y: offset,
        animated: animated
      });
    }
  }, {
    key: "getListRef",
    value: function getListRef() {
      return this._listRef;
    }
  }, {
    key: "setNativeProps",
    value: function setNativeProps(props) {
      if (this._listRef) {
        this._listRef.setNativeProps(props);
      }
    }
  }, {
    key: "UNSAFE_componentWillReceiveProps",
    value: function UNSAFE_componentWillReceiveProps(newProps) {
      var _this3 = this;

      this.setState(function (state) {
        return _this3._computeState(newProps, state);
      });
    }
  }, {
    key: "render",
    value: function render() {
      return React.createElement(ListView, (0, _extends2.default)({}, this.props, {
        dataSource: this.state.ds,
        ref: this._captureRef,
        renderRow: this._renderRow,
        renderFooter: this.props.FooterComponent && this._renderFooter,
        renderSectionHeader: this.props.sections && this._renderSectionHeader,
        renderSeparator: this.props.SeparatorComponent && this._renderSeparator
      }));
    }
  }, {
    key: "_computeState",
    value: function _computeState(props, state) {
      var sectionHeaderData = {};

      if (props.sections) {
        invariant(!props.items, 'Cannot have both sections and items props.');
        var sections = {};
        props.sections.forEach(function (sectionIn, ii) {
          var sectionID = 's' + ii;
          sections[sectionID] = sectionIn.data;
          sectionHeaderData[sectionID] = sectionIn;
        });
        return {
          ds: state.ds.cloneWithRowsAndSections(sections),
          sectionHeaderData: sectionHeaderData
        };
      } else {
        invariant(!props.sections, 'Cannot have both sections and items props.');
        return {
          ds: state.ds.cloneWithRows(props.items),
          sectionHeaderData: sectionHeaderData
        };
      }
    }
  }]);
  return MetroListView;
}(React.Component);

(0, _defineProperty2.default)(MetroListView, "defaultProps", {
  keyExtractor: function keyExtractor(item, index) {
    return item.key || String(index);
  },
  renderScrollComponent: function renderScrollComponent(props) {
    if (props.onRefresh) {
      return React.createElement(ScrollView, (0, _extends2.default)({}, props, {
        refreshControl: React.createElement(RefreshControl, {
          refreshing: props.refreshing,
          onRefresh: props.onRefresh
        })
      }));
    } else {
      return React.createElement(ScrollView, props);
    }
  }
});
module.exports = MetroListView;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,